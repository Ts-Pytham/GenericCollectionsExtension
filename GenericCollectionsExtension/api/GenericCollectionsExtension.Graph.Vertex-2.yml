### YamlMime:ManagedReference
items:
- uid: GenericCollectionsExtension.Graph.Vertex`2
  commentId: T:GenericCollectionsExtension.Graph.Vertex`2
  id: Vertex`2
  parent: GenericCollectionsExtension.Graph
  children:
  - GenericCollectionsExtension.Graph.Vertex`2.#ctor(`0)
  - GenericCollectionsExtension.Graph.Vertex`2.AddEdge(GenericCollectionsExtension.Graph.Edge{`0,`1})
  - GenericCollectionsExtension.Graph.Vertex`2.Edges
  - GenericCollectionsExtension.Graph.Vertex`2.Equals(GenericCollectionsExtension.Graph.Vertex{`0,`1})
  - GenericCollectionsExtension.Graph.Vertex`2.Equals(System.Object)
  - GenericCollectionsExtension.Graph.Vertex`2.GetHashCode
  - GenericCollectionsExtension.Graph.Vertex`2.VertexName
  langs:
  - csharp
  - vb
  name: Vertex<T, U>
  nameWithType: Vertex<T, U>
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>
  type: Class
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: Vertex
    path: Graph/Vertex.cs
    startLine: 11
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nRepresents a vertex in a graph, with a name and a list of edges connecting it to other vertices.\n"
  example: []
  syntax:
    content: 'public class Vertex<T, U> : IEquatable<Vertex<T, U>> where U : IComparable<U>'
    typeParameters:
    - id: T
      description: The type of the vertex name.
    - id: U
      description: The type of the cost associated with the edges connected to the vertex.
    content.vb: >-
      Public Class Vertex(Of T, U As IComparable(Of U))
          Implements IEquatable(Of Vertex(Of T, U))
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{GenericCollectionsExtension.Graph.Vertex`2}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Vertex(Of T, U)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U)
  name.vb: Vertex(Of T, U)
- uid: GenericCollectionsExtension.Graph.Vertex`2.VertexName
  commentId: P:GenericCollectionsExtension.Graph.Vertex`2.VertexName
  id: VertexName
  parent: GenericCollectionsExtension.Graph.Vertex`2
  langs:
  - csharp
  - vb
  name: VertexName
  nameWithType: Vertex<T, U>.VertexName
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.VertexName
  type: Property
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: VertexName
    path: Graph/Vertex.cs
    startLine: 17
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nGets or sets the name of the vertex.\n"
  example: []
  syntax:
    content: public T VertexName { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property VertexName As T
  overload: GenericCollectionsExtension.Graph.Vertex`2.VertexName*
  nameWithType.vb: Vertex(Of T, U).VertexName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).VertexName
- uid: GenericCollectionsExtension.Graph.Vertex`2.Edges
  commentId: P:GenericCollectionsExtension.Graph.Vertex`2.Edges
  id: Edges
  parent: GenericCollectionsExtension.Graph.Vertex`2
  langs:
  - csharp
  - vb
  name: Edges
  nameWithType: Vertex<T, U>.Edges
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.Edges
  type: Property
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: Edges
    path: Graph/Vertex.cs
    startLine: 22
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nGets the list of edges connecting the vertex to other vertices.\n"
  example: []
  syntax:
    content: public List<Edge<T, U>> Edges { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{GenericCollectionsExtension.Graph.Edge{{T},{U}}}
    content.vb: Public ReadOnly Property Edges As List(Of Edge(Of T, U))
  overload: GenericCollectionsExtension.Graph.Vertex`2.Edges*
  nameWithType.vb: Vertex(Of T, U).Edges
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).Edges
- uid: GenericCollectionsExtension.Graph.Vertex`2.#ctor(`0)
  commentId: M:GenericCollectionsExtension.Graph.Vertex`2.#ctor(`0)
  id: '#ctor(`0)'
  parent: GenericCollectionsExtension.Graph.Vertex`2
  langs:
  - csharp
  - vb
  name: Vertex(T)
  nameWithType: Vertex<T, U>.Vertex(T)
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.Vertex(T)
  type: Constructor
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: .ctor
    path: Graph/Vertex.cs
    startLine: 28
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nConstructs a new instance of the vertex with the specified name.\n"
  example: []
  syntax:
    content: public Vertex(T Vertex)
    parameters:
    - id: Vertex
      type: '{T}'
      description: The name of the vertex.
    content.vb: Public Sub New(Vertex As T)
  overload: GenericCollectionsExtension.Graph.Vertex`2.#ctor*
  nameWithType.vb: Vertex(Of T, U).Vertex(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).Vertex(T)
- uid: GenericCollectionsExtension.Graph.Vertex`2.AddEdge(GenericCollectionsExtension.Graph.Edge{`0,`1})
  commentId: M:GenericCollectionsExtension.Graph.Vertex`2.AddEdge(GenericCollectionsExtension.Graph.Edge{`0,`1})
  id: AddEdge(GenericCollectionsExtension.Graph.Edge{`0,`1})
  parent: GenericCollectionsExtension.Graph.Vertex`2
  langs:
  - csharp
  - vb
  name: AddEdge(Edge<T, U>)
  nameWithType: Vertex<T, U>.AddEdge(Edge<T, U>)
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.AddEdge(GenericCollectionsExtension.Graph.Edge<T, U>)
  type: Method
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: AddEdge
    path: Graph/Vertex.cs
    startLine: 38
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nAdds an edge to the list of edges connecting the vertex to other vertices.\n"
  example: []
  syntax:
    content: public void AddEdge(Edge<T, U> edge)
    parameters:
    - id: edge
      type: GenericCollectionsExtension.Graph.Edge{{T},{U}}
      description: The edge to be added.
    content.vb: Public Sub AddEdge(edge As Edge(Of T, U))
  overload: GenericCollectionsExtension.Graph.Vertex`2.AddEdge*
  nameWithType.vb: Vertex(Of T, U).AddEdge(Edge(Of T, U))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).AddEdge(GenericCollectionsExtension.Graph.Edge(Of T, U))
  name.vb: AddEdge(Edge(Of T, U))
- uid: GenericCollectionsExtension.Graph.Vertex`2.Equals(System.Object)
  commentId: M:GenericCollectionsExtension.Graph.Vertex`2.Equals(System.Object)
  id: Equals(System.Object)
  parent: GenericCollectionsExtension.Graph.Vertex`2
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Vertex<T, U>.Equals(Object)
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: Equals
    path: Graph/Vertex.cs
    startLine: 48
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nDetermines whether the specified object is equal to the current object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: True if the specified object is equal to the current object; otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: GenericCollectionsExtension.Graph.Vertex`2.Equals*
  nameWithType.vb: Vertex(Of T, U).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).Equals(System.Object)
- uid: GenericCollectionsExtension.Graph.Vertex`2.GetHashCode
  commentId: M:GenericCollectionsExtension.Graph.Vertex`2.GetHashCode
  id: GetHashCode
  parent: GenericCollectionsExtension.Graph.Vertex`2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vertex<T, U>.GetHashCode()
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.GetHashCode()
  type: Method
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: GetHashCode
    path: Graph/Vertex.cs
    startLine: 57
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nServes as the default hash function.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for the current object.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: GenericCollectionsExtension.Graph.Vertex`2.GetHashCode*
  nameWithType.vb: Vertex(Of T, U).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).GetHashCode()
- uid: GenericCollectionsExtension.Graph.Vertex`2.Equals(GenericCollectionsExtension.Graph.Vertex{`0,`1})
  commentId: M:GenericCollectionsExtension.Graph.Vertex`2.Equals(GenericCollectionsExtension.Graph.Vertex{`0,`1})
  id: Equals(GenericCollectionsExtension.Graph.Vertex{`0,`1})
  parent: GenericCollectionsExtension.Graph.Vertex`2
  langs:
  - csharp
  - vb
  name: Equals(Vertex<T, U>)
  nameWithType: Vertex<T, U>.Equals(Vertex<T, U>)
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.Equals(GenericCollectionsExtension.Graph.Vertex<T, U>)
  type: Method
  source:
    remote:
      path: GenericCollectionsExtension/Graph/Vertex.cs
      branch: master
      repo: https://github.com/Ts-Pytham/GenericCollectionsExtension.git
    id: Equals
    path: Graph/Vertex.cs
    startLine: 70
  assemblies:
  - GenericCollectionsExtension
  namespace: GenericCollectionsExtension.Graph
  summary: "\nDetermines if this vertex is equal to another vertex based on the vertex name and edges.\n"
  example: []
  syntax:
    content: public bool Equals(Vertex<T, U> other)
    parameters:
    - id: other
      type: GenericCollectionsExtension.Graph.Vertex`2
      description: The other vertex to compare with.
    return:
      type: System.Boolean
      description: True if the vertices are equal, false otherwise.
    content.vb: Public Function Equals(other As Vertex(Of T, U)) As Boolean
  overload: GenericCollectionsExtension.Graph.Vertex`2.Equals*
  implements:
  - System.IEquatable{GenericCollectionsExtension.Graph.Vertex`2}.Equals(GenericCollectionsExtension.Graph.Vertex{{T},{U}})
  nameWithType.vb: Vertex(Of T, U).Equals(Vertex(Of T, U))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).Equals(GenericCollectionsExtension.Graph.Vertex(Of T, U))
  name.vb: Equals(Vertex(Of T, U))
references:
- uid: GenericCollectionsExtension.Graph
  commentId: N:GenericCollectionsExtension.Graph
  name: GenericCollectionsExtension.Graph
  nameWithType: GenericCollectionsExtension.Graph
  fullName: GenericCollectionsExtension.Graph
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{GenericCollectionsExtension.Graph.Vertex`2}
  commentId: T:System.IEquatable{GenericCollectionsExtension.Graph.Vertex`2}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Vertex<T, U>>
  nameWithType: IEquatable<Vertex<T, U>>
  fullName: System.IEquatable<GenericCollectionsExtension.Graph.Vertex<T, U>>
  nameWithType.vb: IEquatable(Of Vertex(Of T, U))
  fullName.vb: System.IEquatable(Of GenericCollectionsExtension.Graph.Vertex(Of T, U))
  name.vb: IEquatable(Of Vertex(Of T, U))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GenericCollectionsExtension.Graph.Vertex`2
    name: Vertex
    nameWithType: Vertex
    fullName: GenericCollectionsExtension.Graph.Vertex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GenericCollectionsExtension.Graph.Vertex`2
    name: Vertex
    nameWithType: Vertex
    fullName: GenericCollectionsExtension.Graph.Vertex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GenericCollectionsExtension.Graph.Vertex`2.VertexName*
  commentId: Overload:GenericCollectionsExtension.Graph.Vertex`2.VertexName
  name: VertexName
  nameWithType: Vertex<T, U>.VertexName
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.VertexName
  nameWithType.vb: Vertex(Of T, U).VertexName
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).VertexName
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: GenericCollectionsExtension.Graph.Vertex`2.Edges*
  commentId: Overload:GenericCollectionsExtension.Graph.Vertex`2.Edges
  name: Edges
  nameWithType: Vertex<T, U>.Edges
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.Edges
  nameWithType.vb: Vertex(Of T, U).Edges
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).Edges
- uid: System.Collections.Generic.List{GenericCollectionsExtension.Graph.Edge{{T},{U}}}
  commentId: T:System.Collections.Generic.List{GenericCollectionsExtension.Graph.Edge{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Edge<T, U>>
  nameWithType: List<Edge<T, U>>
  fullName: System.Collections.Generic.List<GenericCollectionsExtension.Graph.Edge<T, U>>
  nameWithType.vb: List(Of Edge(Of T, U))
  fullName.vb: System.Collections.Generic.List(Of GenericCollectionsExtension.Graph.Edge(Of T, U))
  name.vb: List(Of Edge(Of T, U))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GenericCollectionsExtension.Graph.Edge`2
    name: Edge
    nameWithType: Edge
    fullName: GenericCollectionsExtension.Graph.Edge
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GenericCollectionsExtension.Graph.Edge`2
    name: Edge
    nameWithType: Edge
    fullName: GenericCollectionsExtension.Graph.Edge
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GenericCollectionsExtension.Graph.Vertex`2.#ctor*
  commentId: Overload:GenericCollectionsExtension.Graph.Vertex`2.#ctor
  name: Vertex
  nameWithType: Vertex<T, U>.Vertex
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.Vertex
  nameWithType.vb: Vertex(Of T, U).Vertex
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).Vertex
- uid: GenericCollectionsExtension.Graph.Vertex`2.AddEdge*
  commentId: Overload:GenericCollectionsExtension.Graph.Vertex`2.AddEdge
  name: AddEdge
  nameWithType: Vertex<T, U>.AddEdge
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.AddEdge
  nameWithType.vb: Vertex(Of T, U).AddEdge
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).AddEdge
- uid: GenericCollectionsExtension.Graph.Edge{{T},{U}}
  commentId: T:GenericCollectionsExtension.Graph.Edge{`0,`1}
  parent: GenericCollectionsExtension.Graph
  definition: GenericCollectionsExtension.Graph.Edge`2
  name: Edge<T, U>
  nameWithType: Edge<T, U>
  fullName: GenericCollectionsExtension.Graph.Edge<T, U>
  nameWithType.vb: Edge(Of T, U)
  fullName.vb: GenericCollectionsExtension.Graph.Edge(Of T, U)
  name.vb: Edge(Of T, U)
  spec.csharp:
  - uid: GenericCollectionsExtension.Graph.Edge`2
    name: Edge
    nameWithType: Edge
    fullName: GenericCollectionsExtension.Graph.Edge
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GenericCollectionsExtension.Graph.Edge`2
    name: Edge
    nameWithType: Edge
    fullName: GenericCollectionsExtension.Graph.Edge
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: GenericCollectionsExtension.Graph.Edge`2
  commentId: T:GenericCollectionsExtension.Graph.Edge`2
  name: Edge<T, U>
  nameWithType: Edge<T, U>
  fullName: GenericCollectionsExtension.Graph.Edge<T, U>
  nameWithType.vb: Edge(Of T, U)
  fullName.vb: GenericCollectionsExtension.Graph.Edge(Of T, U)
  name.vb: Edge(Of T, U)
  spec.csharp:
  - uid: GenericCollectionsExtension.Graph.Edge`2
    name: Edge
    nameWithType: Edge
    fullName: GenericCollectionsExtension.Graph.Edge
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GenericCollectionsExtension.Graph.Edge`2
    name: Edge
    nameWithType: Edge
    fullName: GenericCollectionsExtension.Graph.Edge
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GenericCollectionsExtension.Graph.Vertex`2.Equals*
  commentId: Overload:GenericCollectionsExtension.Graph.Vertex`2.Equals
  name: Equals
  nameWithType: Vertex<T, U>.Equals
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.Equals
  nameWithType.vb: Vertex(Of T, U).Equals
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GenericCollectionsExtension.Graph.Vertex`2.GetHashCode*
  commentId: Overload:GenericCollectionsExtension.Graph.Vertex`2.GetHashCode
  name: GetHashCode
  nameWithType: Vertex<T, U>.GetHashCode
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>.GetHashCode
  nameWithType.vb: Vertex(Of T, U).GetHashCode
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IEquatable{GenericCollectionsExtension.Graph.Vertex`2}.Equals(GenericCollectionsExtension.Graph.Vertex{{T},{U}})
  commentId: M:System.IEquatable{GenericCollectionsExtension.Graph.Vertex`2}.Equals(GenericCollectionsExtension.Graph.Vertex{`0,`1})
  parent: System.IEquatable{GenericCollectionsExtension.Graph.Vertex`2}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Vertex<T, U>)
  nameWithType: IEquatable<Vertex<T, U>>.Equals(Vertex<T, U>)
  fullName: System.IEquatable<GenericCollectionsExtension.Graph.Vertex<T, U>>.Equals(GenericCollectionsExtension.Graph.Vertex<T, U>)
  nameWithType.vb: IEquatable(Of Vertex(Of T, U)).Equals(Vertex(Of T, U))
  fullName.vb: System.IEquatable(Of GenericCollectionsExtension.Graph.Vertex(Of T, U)).Equals(GenericCollectionsExtension.Graph.Vertex(Of T, U))
  name.vb: Equals(Vertex(Of T, U))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Vertex<T, U>>.Equals
    fullName: System.IEquatable<GenericCollectionsExtension.Graph.Vertex<T, U>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GenericCollectionsExtension.Graph.Vertex`2
    name: Vertex
    nameWithType: Vertex
    fullName: GenericCollectionsExtension.Graph.Vertex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Vertex(Of T, U)).Equals
    fullName: System.IEquatable(Of GenericCollectionsExtension.Graph.Vertex(Of T, U)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GenericCollectionsExtension.Graph.Vertex`2
    name: Vertex
    nameWithType: Vertex
    fullName: GenericCollectionsExtension.Graph.Vertex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GenericCollectionsExtension.Graph.Vertex`2
  commentId: T:GenericCollectionsExtension.Graph.Vertex`2
  parent: GenericCollectionsExtension.Graph
  name: Vertex<T, U>
  nameWithType: Vertex<T, U>
  fullName: GenericCollectionsExtension.Graph.Vertex<T, U>
  nameWithType.vb: Vertex(Of T, U)
  fullName.vb: GenericCollectionsExtension.Graph.Vertex(Of T, U)
  name.vb: Vertex(Of T, U)
  spec.csharp:
  - uid: GenericCollectionsExtension.Graph.Vertex`2
    name: Vertex
    nameWithType: Vertex
    fullName: GenericCollectionsExtension.Graph.Vertex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GenericCollectionsExtension.Graph.Vertex`2
    name: Vertex
    nameWithType: Vertex
    fullName: GenericCollectionsExtension.Graph.Vertex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
